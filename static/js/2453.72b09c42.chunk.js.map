{"version":3,"file":"static/js/2453.72b09c42.chunk.js","mappings":"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","sources":["components/container/PageContainer.tsx","components/custom-scroll/Scrollbar.tsx","components/shared/AppCard.tsx","layouts/full/shared/breadcrumb/Breadcrumb.tsx","components/apps/chats/ChatListing.tsx","components/apps/chats/ChatSidebar.tsx","components/apps/chats/ChatInsideSidebar.tsx","components/apps/chats/ChatContent.tsx","components/apps/chats/ChatMsgSent.tsx","views/apps/chat/Chat.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\ntype Props = {\r\n  description?: string;\r\n  children: JSX.Element | JSX.Element[];\r\n  title?: string;\r\n};\r\n\r\nconst PageContainer = ({ title, description, children }: Props) => (\r\n  <div>\r\n    <Helmet>\r\n      <title>{title}</title>\r\n      <meta name=\"description\" content={description} />\r\n    </Helmet>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default PageContainer;\r\n","import SimpleBar from 'simplebar-react';\r\nimport 'simplebar/dist/simplebar.min.css';\r\nimport { Box, styled, SxProps } from '@mui/material';\r\n\r\nconst SimpleBarStyle = styled(SimpleBar)(() => ({\r\n  maxHeight: '100%',\r\n}));\r\n\r\ninterface PropsType {\r\n  children: React.ReactElement | React.ReactNode;\r\n  sx: SxProps;\r\n}\r\n\r\nconst Scrollbar = (props: PropsType) => {\r\n  const { children, sx, ...other } = props;\r\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n    navigator.userAgent,\r\n  );\r\n\r\n  if (isMobile) {\r\n    return <Box sx={{ overflowX: 'auto' }}>{children}</Box>;\r\n  }\r\n\r\n  return (\r\n    <SimpleBarStyle sx={sx} {...other}>\r\n      {children}\r\n    </SimpleBarStyle>\r\n  );\r\n};\r\n\r\nexport default Scrollbar;\r\n","import React from 'react';\r\n\r\nimport { Card } from '@mui/material';\r\nimport { useSelector } from 'src/store/Store';\r\nimport { AppState } from 'src/store/Store';\r\n\r\ntype Props = {\r\n  children: JSX.Element | JSX.Element[];\r\n};\r\n\r\nconst AppCard = ({ children }: Props) => {\r\n  const customizer = useSelector((state: AppState) => state.customizer);\r\n\r\n  return (\r\n    <Card\r\n      sx={{ display: 'flex', p: 0 }}\r\n      elevation={customizer.isCardShadow ? 9 : 0}\r\n      variant={!customizer.isCardShadow ? 'outlined' : undefined}\r\n    >\r\n      {children}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AppCard;\r\n","import React from 'react';\r\nimport { Grid, Typography, Box, Breadcrumbs, Link, Theme } from '@mui/material';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport breadcrumbImg from 'src/assets/images/breadcrumb/ChatBc.png';\r\nimport { IconCircle } from '@tabler/icons';\r\n\r\ninterface BreadCrumbType {\r\n  subtitle?: string;\r\n  items?: any[];\r\n  title: string;\r\n  children?: JSX.Element;\r\n}\r\n\r\nconst Breadcrumb = ({ subtitle, items, title, children }: BreadCrumbType) => (\r\n  <Grid\r\n    container\r\n    sx={{\r\n      backgroundColor: 'primary.light',\r\n      borderRadius: (theme: Theme) => theme.shape.borderRadius / 4,\r\n      p: '30px 25px 20px',\r\n      marginBottom: '30px',\r\n      position: 'relative',\r\n      overflow: 'hidden',\r\n    }}\r\n  >\r\n    <Grid item xs={12} sm={6} lg={8} mb={1}>\r\n      <Typography variant=\"h4\">{title}</Typography>\r\n      <Typography color=\"textSecondary\" variant=\"h6\" fontWeight={400} mt={0.8} mb={0}>\r\n        {subtitle}\r\n      </Typography>\r\n      <Breadcrumbs\r\n        separator={\r\n          <IconCircle\r\n            size=\"5\"\r\n            fill=\"textSecondary\"\r\n            fillOpacity={'0.6'}\r\n            style={{ margin: '0 5px' }}\r\n          />\r\n        }\r\n        sx={{ alignItems: 'center', mt: items ? '10px' : '' }}\r\n        aria-label=\"breadcrumb\"\r\n      >\r\n        {items\r\n          ? items.map((item) => (\r\n              <div key={item.title}>\r\n                {item.to ? (\r\n                  <Link underline=\"none\" color=\"inherit\" component={NavLink} to={item.to}>\r\n                    {item.title}\r\n                  </Link>\r\n                ) : (\r\n                  <Typography color=\"textPrimary\">{item.title}</Typography>\r\n                )}\r\n              </div>\r\n            ))\r\n          : ''}\r\n      </Breadcrumbs>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} lg={4} display=\"flex\" alignItems=\"flex-end\">\r\n      <Box\r\n        sx={{\r\n          display: { xs: 'none', md: 'block', lg: 'flex' },\r\n          alignItems: 'center',\r\n          justifyContent: 'flex-end',\r\n          width: '100%',\r\n        }}\r\n      >\r\n        {children ? (\r\n          <Box sx={{ top: '0px', position: 'absolute' }}>{children}</Box>\r\n        ) : (\r\n          <>\r\n            <Box sx={{ top: '0px', position: 'absolute' }}>\r\n              <img src={breadcrumbImg} alt={breadcrumbImg} width={'165px'} />\r\n            </Box>\r\n          </>\r\n        )}\r\n      </Box>\r\n    </Grid>\r\n  </Grid>\r\n);\r\n\r\nexport default Breadcrumb;\r\n","import React, { useEffect } from 'react';\r\nimport {\r\n  Avatar,\r\n  List,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  TextField,\r\n  Box,\r\n  Alert,\r\n  Badge,\r\n  ListItemButton,\r\n  Typography,\r\n  InputAdornment,\r\n  Button,\r\n  Menu,\r\n  MenuItem,\r\n} from '@mui/material';\r\nimport { useSelector, useDispatch } from 'src/store/Store';\r\nimport Scrollbar from '../../custom-scroll/Scrollbar';\r\nimport { SelectChat, fetchChats, SearchChat } from '../../../store/apps/chat/ChatSlice';\r\nimport { ChatsType } from 'src/types/apps/chat';\r\nimport { last } from 'lodash';\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\nimport { IconChevronDown, IconSearch } from '@tabler/icons';\r\nimport user1 from 'src/assets/images/profile/user-1.jpg';\r\n\r\nconst ChatListing = () => {\r\n  const dispatch = useDispatch();\r\n  const activeChat = useSelector((state) => state.chatReducer.chatContent);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchChats());\r\n  }, [dispatch]);\r\n\r\n  const filterChats = (chats: ChatsType[], cSearch: string) => {\r\n    if (chats)\r\n      return chats.filter((t) => t.name.toLocaleLowerCase().includes(cSearch.toLocaleLowerCase()));\r\n\r\n    return chats;\r\n  };\r\n\r\n  const chats = useSelector((state) =>\r\n    filterChats(state.chatReducer.chats, state.chatReducer.chatSearch),\r\n  );\r\n\r\n  const getDetails = (conversation: ChatsType) => {\r\n    let displayText = '';\r\n\r\n    const lastMessage = conversation.messages[conversation.messages.length - 1];\r\n    if (lastMessage) {\r\n      const sender = lastMessage.senderId === conversation.id ? 'You: ' : '';\r\n      const message = lastMessage.type === 'image' ? 'Sent a photo' : lastMessage.msg;\r\n      displayText = `${sender}${message}`;\r\n    }\r\n\r\n    return displayText;\r\n  };\r\n\r\n  const lastActivity = (chat: ChatsType) => last(chat.messages)?.createdAt;\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* ------------------------------------------- */}\r\n      {/* Profile */}\r\n      {/* ------------------------------------------- */}\r\n      <Box display={'flex'} alignItems=\"center\" gap=\"10px\" p={3}>\r\n        <Badge\r\n          variant=\"dot\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          overlap=\"circular\"\r\n          color=\"success\"\r\n        >\r\n          <Avatar alt=\"Remy Sharp\" src={user1} sx={{ width: 54, height: 54 }} />\r\n        </Badge>\r\n        <Box>\r\n          <Typography variant=\"body1\" fontWeight={600}>\r\n            John Deo\r\n          </Typography>\r\n          <Typography variant=\"body2\">Marketing Manager</Typography>\r\n        </Box>\r\n      </Box>\r\n      {/* ------------------------------------------- */}\r\n      {/* Search */}\r\n      {/* ------------------------------------------- */}\r\n      <Box px={3} py={1}>\r\n        <TextField\r\n          id=\"outlined-search\"\r\n          placeholder=\"Search contacts\"\r\n          size=\"small\"\r\n          type=\"search\"\r\n          variant=\"outlined\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconSearch size={'16'} />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          fullWidth\r\n          onChange={(e) => dispatch(SearchChat(e.target.value))}\r\n        />\r\n      </Box>\r\n      {/* ------------------------------------------- */}\r\n      {/* Contact List */}\r\n      {/* ------------------------------------------- */}\r\n      <List sx={{ px: 0 }}>\r\n        <Box px={2.5} pb={1}>\r\n          <Button\r\n            id=\"basic-button\"\r\n            aria-controls={open ? 'basic-menu' : undefined}\r\n            aria-haspopup=\"true\"\r\n            aria-expanded={open ? 'true' : undefined}\r\n            onClick={handleClick}\r\n            color=\"inherit\"\r\n          >\r\n            Recent Chats <IconChevronDown size=\"16\" />\r\n          </Button>\r\n          <Menu\r\n            id=\"basic-menu\"\r\n            anchorEl={anchorEl}\r\n            open={open}\r\n            onClose={handleClose}\r\n            MenuListProps={{\r\n              'aria-labelledby': 'basic-button',\r\n            }}\r\n          >\r\n            <MenuItem onClick={handleClose}>Sort By Time</MenuItem>\r\n            <MenuItem onClick={handleClose}>Sort By Unread</MenuItem>\r\n            <MenuItem onClick={handleClose}>Mark as all Read</MenuItem>\r\n          </Menu>\r\n        </Box>\r\n        <Scrollbar sx={{ height: { lg: 'calc(100vh - 100px)', md: '100vh' }, maxHeight: '600px' }}>\r\n          {chats && chats.length ? (\r\n            chats.map((chat) => (\r\n              <ListItemButton\r\n                key={chat.id}\r\n                onClick={() => dispatch(SelectChat(chat.id))}\r\n                sx={{\r\n                  mb: 0.5,\r\n                  py: 2,\r\n                  px: 3,\r\n                  alignItems: 'start',\r\n                }}\r\n                selected={activeChat === chat.id}\r\n              >\r\n                <ListItemAvatar>\r\n                  <Badge\r\n                    color={\r\n                      chat.status === 'online'\r\n                        ? 'success'\r\n                        : chat.status === 'busy'\r\n                        ? 'error'\r\n                        : chat.status === 'away'\r\n                        ? 'warning'\r\n                        : 'secondary'\r\n                    }\r\n                    variant=\"dot\"\r\n                    anchorOrigin={{\r\n                      vertical: 'bottom',\r\n                      horizontal: 'right',\r\n                    }}\r\n                    overlap=\"circular\"\r\n                  >\r\n                    <Avatar alt=\"Remy Sharp\" src={chat.thumb} sx={{ width: 42, height: 42 }} />\r\n                  </Badge>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography variant=\"subtitle2\" fontWeight={600} mb={0.5}>\r\n                      {chat.name}\r\n                    </Typography>\r\n                  }\r\n                  secondary={getDetails(chat)}\r\n                  secondaryTypographyProps={{\r\n                    noWrap: true,\r\n                  }}\r\n                  sx={{ my: 0 }}\r\n                />\r\n                <Box sx={{ flexShrink: '0' }} mt={0.5}>\r\n                  <Typography variant=\"body2\">\r\n                    {formatDistanceToNowStrict(new Date(lastActivity(chat)), {\r\n                      addSuffix: false,\r\n                    })}\r\n                  </Typography>\r\n                </Box>\r\n              </ListItemButton>\r\n            ))\r\n          ) : (\r\n            <Box m={2}>\r\n              <Alert severity=\"error\" variant=\"filled\" sx={{ color: 'white' }}>\r\n                No Contacts Found!\r\n              </Alert>\r\n            </Box>\r\n          )}\r\n        </Scrollbar>\r\n      </List>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatListing;\r\n","import React from 'react';\r\nimport { Drawer, Theme, useMediaQuery } from '@mui/material';\r\nimport ChatListing from './ChatListing';\r\n\r\ninterface chatType {\r\n  isMobileSidebarOpen: boolean;\r\n  onSidebarClose: (event: React.MouseEvent<HTMLElement>) => void;\r\n}\r\n\r\nconst drawerWidth = 320;\r\n\r\nconst ChatSidebar = ({ isMobileSidebarOpen, onSidebarClose }: chatType) => {\r\n  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));\r\n\r\n  return (\r\n    <Drawer\r\n      open={isMobileSidebarOpen}\r\n      onClose={onSidebarClose}\r\n      variant={lgUp ? 'permanent' : 'temporary'}\r\n      sx={{\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        zIndex: lgUp ? 0 : 1,\r\n        [`& .MuiDrawer-paper`]: { position: 'relative' },\r\n      }}\r\n    >\r\n      <ChatListing />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default ChatSidebar;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  Theme,\r\n  useMediaQuery,\r\n  Typography,\r\n  Stack,\r\n  Avatar,\r\n  Grid,\r\n  Alert,\r\n  IconButton,\r\n  styled,\r\n} from '@mui/material';\r\nimport { ChatsType } from 'src/types/apps/chat';\r\nimport { uniq, flatten } from 'lodash';\r\nimport { IconDownload } from '@tabler/icons';\r\n\r\ninterface chatType {\r\n  isInSidebar?: boolean;\r\n  chat?: ChatsType;\r\n}\r\n\r\nconst drawerWidth = 320;\r\n\r\nconst ChatInsideSidebar = ({ isInSidebar, chat }: chatType) => {\r\n  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));\r\n  const totalAttachment = uniq(flatten(chat?.messages.map((item) => item.attachment))).length;\r\n  const totalMedia =\r\n    uniq(flatten(chat?.messages.map((item) => (item?.type === 'image' ? item.msg : null)))).length -\r\n    1;\r\n\r\n  const StyledStack = styled(Stack)(() => ({\r\n    '.showOnHover': {\r\n      display: 'none',\r\n    },\r\n    '&:hover .showOnHover': {\r\n      display: 'block',\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      {isInSidebar ? (\r\n        <Box\r\n          sx={{\r\n            width: isInSidebar === true ? drawerWidth : 0,\r\n            flexShrink: 0,\r\n            border: '0',\r\n            borderLeft: '1px',\r\n            borderStyle: 'solid',\r\n            right: '0',\r\n            background: (theme) => theme.palette.background.paper,\r\n            boxShadow: lgUp ? null : (theme) => theme.shadows[8],\r\n            position: lgUp ? 'relative' : 'absolute',\r\n            borderColor: (theme) => theme.palette.divider,\r\n          }}\r\n          p={3}\r\n        >\r\n          <Typography variant=\"h6\" mb={2}>\r\n            Media ({totalMedia})\r\n          </Typography>\r\n          <Grid container spacing={2}>\r\n            {chat?.messages.map((c) => {\r\n              return (\r\n                <Grid item xs={12} lg={4} key={c.id}>\r\n                  {c?.type === 'image' ? (\r\n                    <Avatar\r\n                      src={c?.msg}\r\n                      alt=\"media\"\r\n                      variant=\"rounded\"\r\n                      sx={{ width: '72px', height: '72px' }}\r\n                    />\r\n                  ) : (\r\n                    ''\r\n                  )}\r\n                </Grid>\r\n              );\r\n            })}\r\n            <Grid item xs={12} lg={12}>\r\n              {totalMedia === 0 ? <Alert severity=\"error\">No Media Found!</Alert> : null}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Typography variant=\"h6\" mt={5} mb={2}>\r\n            Attachments ({totalAttachment})\r\n          </Typography>\r\n          <Box>\r\n            {chat?.messages.map((c, index) => {\r\n              return (\r\n                <Stack spacing={2.5} key={index} direction=\"column\">\r\n                  {c?.attachment?.map((a, index) => {\r\n                    return (\r\n                      <StyledStack key={index} direction=\"row\" gap={2}>\r\n                        <Avatar\r\n                          variant=\"rounded\"\r\n                          sx={{\r\n                            width: '48px',\r\n                            height: '48px',\r\n                            bgcolor: (theme) => theme.palette.grey[100],\r\n                          }}\r\n                        >\r\n                          <Avatar\r\n                            src={a.icon}\r\n                            alt=\"av\"\r\n                            variant=\"rounded\"\r\n                            sx={{ width: '24px', height: '24px' }}\r\n                          ></Avatar>\r\n                        </Avatar>\r\n                        <Box mr={'auto'}>\r\n                          <Typography variant=\"subtitle2\" fontWeight={600} mb={1}>\r\n                            {a.file}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\">{a.fileSize}</Typography>\r\n                        </Box>\r\n                        <Box className=\"showOnHover\">\r\n                          <IconButton aria-label=\"delete\">\r\n                            <IconDownload stroke={1.5} size=\"20\" />\r\n                          </IconButton>\r\n                        </Box>\r\n                      </StyledStack>\r\n                    );\r\n                  })}\r\n                </Stack>\r\n              );\r\n            })}\r\n            {totalAttachment === 0 ? <Alert severity=\"error\">No Attachment Found!</Alert> : null}\r\n          </Box>\r\n        </Box>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatInsideSidebar;\r\n","import React from 'react';\r\nimport {\r\n  Typography,\r\n  Divider,\r\n  Avatar,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  IconButton,\r\n  Box,\r\n  Stack,\r\n  Badge,\r\n  useMediaQuery,\r\n  Theme\r\n} from '@mui/material';\r\nimport { IconDotsVertical, IconMenu2, IconPhone, IconVideo } from '@tabler/icons';\r\nimport { useSelector } from 'src/store/Store';\r\n\r\nimport { ChatsType } from 'src/types/apps/chat';\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\nimport ChatInsideSidebar from './ChatInsideSidebar';\r\nimport Scrollbar from 'src/components/custom-scroll/Scrollbar';\r\n\r\n\r\ninterface ChatContentProps {\r\n  toggleChatSidebar: () => void;\r\n}\r\n\r\n  const ChatContent: React.FC<ChatContentProps> = ({ toggleChatSidebar }) => {\r\n  const [open, setOpen] = React.useState(true);\r\n  const lgUp = useMediaQuery((theme: Theme) => theme.breakpoints.up('lg'));\r\n\r\n  const chatDetails: ChatsType = useSelector(\r\n    (state) => state.chatReducer.chats[state.chatReducer.chatContent - 1],\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      {chatDetails ? (\r\n        <Box>\r\n          {/* ------------------------------------------- */}\r\n          {/* Header Part */}\r\n          {/* ------------------------------------------- */}\r\n          <Box>\r\n            <Box display=\"flex\" alignItems=\"center\" p={2}>\r\n              <Box\r\n                sx={{\r\n                  display: { xs: 'block', md: 'block', lg: 'none' },\r\n                  mr: '10px',\r\n                }}\r\n              >\r\n                <IconMenu2 stroke={1.5} onClick={toggleChatSidebar} />\r\n              </Box>\r\n              <ListItem key={chatDetails.id} dense disableGutters>\r\n                <ListItemAvatar>\r\n                  <Badge\r\n                    color={\r\n                      chatDetails.status === 'online'\r\n                        ? 'success'\r\n                        : chatDetails.status === 'busy'\r\n                        ? 'error'\r\n                        : chatDetails.status === 'away'\r\n                        ? 'warning'\r\n                        : 'secondary'\r\n                    }\r\n                    variant=\"dot\"\r\n                    anchorOrigin={{\r\n                      vertical: 'bottom',\r\n                      horizontal: 'right',\r\n                    }}\r\n                    overlap=\"circular\"\r\n                  >\r\n                    <Avatar alt={chatDetails.name} src={chatDetails.thumb} />\r\n                  </Badge>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={<Typography variant=\"h5\">{chatDetails.name}</Typography>}\r\n                  secondary={chatDetails.status}\r\n                />\r\n              </ListItem>\r\n              <Stack direction={'row'}>\r\n                <IconButton aria-label=\"delete\">\r\n                  <IconPhone stroke={1.5} />\r\n                </IconButton>\r\n                <IconButton aria-label=\"delete\">\r\n                  <IconVideo stroke={1.5} />\r\n                </IconButton>\r\n                <IconButton aria-label=\"delete\" onClick={() => setOpen(!open)}>\r\n                  <IconDotsVertical stroke={1.5} />\r\n                </IconButton>\r\n              </Stack>\r\n            </Box>\r\n            <Divider />\r\n          </Box>\r\n          {/* ------------------------------------------- */}\r\n          {/* Chat Content */}\r\n          {/* ------------------------------------------- */}\r\n\r\n          <Box display=\"flex\">\r\n            {/* ------------------------------------------- */}\r\n            {/* Chat msges */}\r\n            {/* ------------------------------------------- */}\r\n\r\n            <Box width=\"100%\">\r\n              <Scrollbar sx={{ height: '650px', overflow: 'auto', maxHeight: '800px' }}>\r\n                <Box p={3}>\r\n                  {chatDetails.messages.map((chat) => {\r\n                    return (\r\n                      <Box key={chat.id + chat.msg + chat.createdAt}>\r\n                        {chatDetails.id === chat.senderId ? (\r\n                          <>\r\n                            <Box display=\"flex\">\r\n                              <ListItemAvatar>\r\n                                <Avatar\r\n                                  alt={chatDetails.name}\r\n                                  src={chatDetails.thumb}\r\n                                  sx={{ width: 40, height: 40 }}\r\n                                />\r\n                              </ListItemAvatar>\r\n                              <Box>\r\n                                {chat.createdAt ? (\r\n                                  <Typography variant=\"body2\" color=\"grey.400\" mb={1}>\r\n                                    {chatDetails.name},{' '}\r\n                                    {formatDistanceToNowStrict(new Date(chat.createdAt), {\r\n                                      addSuffix: false,\r\n                                    })}{' '}\r\n                                    ago\r\n                                  </Typography>\r\n                                ) : null}\r\n                                {chat.type === 'text' ? (\r\n                                  <Box\r\n                                    mb={2}\r\n                                    sx={{\r\n                                      p: 1,\r\n                                      backgroundColor: 'grey.100',\r\n                                      mr: 'auto',\r\n                                      maxWidth: '320px',\r\n                                    }}\r\n                                  >\r\n                                    {chat.msg}\r\n                                  </Box>\r\n                                ) : null}\r\n                                {chat.type === 'image' ? (\r\n                                  <Box mb={1} sx={{ overflow: 'hidden', lineHeight: '0px' }}>\r\n                                    <img src={chat.msg} alt=\"attach\" width=\"150\" />\r\n                                  </Box>\r\n                                ) : null}\r\n                              </Box>\r\n                            </Box>\r\n                          </>\r\n                        ) : (\r\n                          <Box\r\n                            mb={1}\r\n                            display=\"flex\"\r\n                            alignItems=\"flex-end\"\r\n                            flexDirection=\"row-reverse\"\r\n                          >\r\n                            <Box alignItems=\"flex-end\" display=\"flex\" flexDirection={'column'}>\r\n                              {chat.createdAt ? (\r\n                                <Typography variant=\"body2\" color=\"grey.400\" mb={1}>\r\n                                  ago\r\n                                </Typography>\r\n                              ) : null}\r\n                              {chat.type === 'text' ? (\r\n                                <Box\r\n                                  mb={1}\r\n                                  key={chat.id}\r\n                                  sx={{\r\n                                    p: 1,\r\n                                    backgroundColor: 'primary.light',\r\n                                    ml: 'auto',\r\n                                    maxWidth: '320px',\r\n                                  }}\r\n                                >\r\n                                  {chat.msg}\r\n                                </Box>\r\n                              ) : null}\r\n                              {chat.type === 'image' ? (\r\n                                <Box mb={1} sx={{ overflow: 'hidden', lineHeight: '0px' }}>\r\n                                  <img src={chat.msg} alt=\"attach\" width=\"250\" />\r\n                                </Box>\r\n                              ) : null}\r\n                            </Box>\r\n                          </Box>\r\n                        )}\r\n                      </Box>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              </Scrollbar>\r\n            </Box>\r\n\r\n            {/* ------------------------------------------- */}\r\n            {/* Chat right sidebar Content */}\r\n            {/* ------------------------------------------- */}\r\n            <ChatInsideSidebar isInSidebar={lgUp ? open : !open} chat={chatDetails} />\r\n          </Box>\r\n        </Box>\r\n      ) : (\r\n        <Box display=\"flex\" alignItems=\"center\" p={2} pb={1} pt={1}>\r\n          {/* ------------------------------------------- */}\r\n          {/* if No Chat Content */}\r\n          {/* ------------------------------------------- */}\r\n          <Box\r\n            sx={{\r\n              display: { xs: 'flex', md: 'flex', lg: 'none' },\r\n              mr: '10px',\r\n            }}\r\n          >\r\n            <IconMenu2 stroke={1.5} onClick={toggleChatSidebar} />\r\n          </Box>\r\n          <Typography variant=\"h4\">Select Chat</Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatContent;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'src/store/Store';\r\nimport { IconButton, InputBase, Box, Popover } from '@mui/material';\r\nimport Picker from 'emoji-picker-react';\r\nimport { IconMoodSmile, IconPaperclip, IconPhoto, IconSend } from '@tabler/icons';\r\nimport { sendMsg } from 'src/store/apps/chat/ChatSlice';\r\n\r\nconst ChatMsgSent = () => {\r\n  const [msg, setMsg] = React.useState<any>('');\r\n  const dispatch = useDispatch();\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n  const [chosenEmoji, setChosenEmoji] = React.useState<any>();\r\n\r\n  const onEmojiClick = (_event: any, emojiObject: any) => {\r\n    setChosenEmoji(emojiObject);\r\n    setMsg(emojiObject.emoji);\r\n  };\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const id = useSelector((state) => state.chatReducer.chatContent);\r\n\r\n  const handleChatMsgChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setMsg(e.target.value);\r\n  };\r\n\r\n  const newMsg = { id, msg };\r\n\r\n  const onChatMsgSubmit = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    dispatch(sendMsg(newMsg));\r\n    setMsg('');\r\n  };\r\n\r\n  return (\r\n    <Box p={2}>\r\n      {/* ------------------------------------------- */}\r\n      {/* sent chat */}\r\n      {/* ------------------------------------------- */}\r\n      <form\r\n        onSubmit={onChatMsgSubmit}\r\n        style={{ display: 'flex', gap: '10px', alignItems: 'center' }}\r\n      >\r\n        {/* ------------------------------------------- */}\r\n        {/* Emoji picker */}\r\n        {/* ------------------------------------------- */}\r\n        <IconButton\r\n          aria-label=\"more\"\r\n          id=\"long-button\"\r\n          aria-controls=\"long-menu\"\r\n          aria-expanded=\"true\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleClick}\r\n        >\r\n          <IconMoodSmile />\r\n        </IconButton>\r\n        <Popover\r\n          id=\"long-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n          anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n          transformOrigin={{ horizontal: 'right', vertical: 'bottom' }}\r\n        >\r\n          <Picker onEmojiClick={onEmojiClick} native />\r\n          <Box p={2}>Selected: {chosenEmoji ? chosenEmoji.emoji : ''}</Box>\r\n        </Popover>\r\n        <InputBase\r\n          id=\"msg-sent\"\r\n          fullWidth\r\n          value={msg}\r\n          placeholder=\"Type a Message\"\r\n          size=\"small\"\r\n          type=\"text\"\r\n          inputProps={{ 'aria-label': 'Type a Message' }}\r\n          onChange={handleChatMsgChange.bind(null)}\r\n        />\r\n        <IconButton\r\n          aria-label=\"delete\"\r\n          onClick={() => {\r\n            dispatch(sendMsg(newMsg));\r\n            setMsg('');\r\n          }}\r\n          disabled={!msg}\r\n          color=\"primary\"\r\n        >\r\n          <IconSend stroke={1.5} size=\"20\" />\r\n        </IconButton>\r\n        <IconButton aria-label=\"delete\">\r\n          <IconPhoto stroke={1.5} size=\"20\" />\r\n        </IconButton>\r\n        <IconButton aria-label=\"delete\">\r\n          <IconPaperclip stroke={1.5} size=\"20\" />\r\n        </IconButton>\r\n      </form>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ChatMsgSent;\r\n","import React, { useState } from 'react';\r\nimport { Divider, Box } from '@mui/material';\r\nimport Breadcrumb from 'src/layouts/full/shared/breadcrumb/Breadcrumb';\r\nimport PageContainer from 'src/components/container/PageContainer';\r\nimport ChatSidebar from 'src/components/apps/chats/ChatSidebar';\r\nimport ChatContent from 'src/components/apps/chats/ChatContent';\r\nimport ChatMsgSent from 'src/components/apps/chats/ChatMsgSent';\r\nimport AppCard from 'src/components/shared/AppCard';\r\n\r\nconst Chats = () => {\r\n  const [isMobileSidebarOpen, setMobileSidebarOpen] = useState(false);\r\n\r\n  return (\r\n    <PageContainer title=\"Chat ui\" description=\"this is Chat page\">\r\n      <Breadcrumb title=\"Chat app\" subtitle=\"Messenger\" />\r\n      <AppCard>\r\n        {/* ------------------------------------------- */}\r\n        {/* Left part */}\r\n        {/* ------------------------------------------- */}\r\n\r\n        <ChatSidebar\r\n          isMobileSidebarOpen={isMobileSidebarOpen}\r\n          onSidebarClose={() => setMobileSidebarOpen(false)}\r\n        />\r\n        {/* ------------------------------------------- */}\r\n        {/* Right part */}\r\n        {/* ------------------------------------------- */}\r\n\r\n        <Box flexGrow={1}>\r\n          <ChatContent toggleChatSidebar={() => setMobileSidebarOpen(true)} />\r\n          <Divider />\r\n          <ChatMsgSent />\r\n        </Box>\r\n      </AppCard>\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default Chats;\r\n"],"names":["title","description","children","name","content","SimpleBarStyle","styled","SimpleBar","maxHeight","props","sx","other","test","navigator","userAgent","overflowX","customizer","useSelector","state","display","p","elevation","isCardShadow","variant","undefined","subtitle","items","Grid","container","backgroundColor","borderRadius","theme","shape","marginBottom","position","overflow","item","xs","sm","lg","mb","Typography","color","fontWeight","mt","Breadcrumbs","separator","size","fill","fillOpacity","style","margin","alignItems","map","to","Link","underline","component","NavLink","Box","md","justifyContent","width","top","src","breadcrumbImg","alt","dispatch","useDispatch","activeChat","chatReducer","chatContent","useEffect","fetchChats","chats","cSearch","filter","t","toLocaleLowerCase","includes","filterChats","chatSearch","getDetails","conversation","displayText","lastMessage","messages","length","sender","senderId","id","message","type","msg","lastActivity","chat","last","createdAt","React","anchorEl","setAnchorEl","open","Boolean","handleClose","gap","Badge","anchorOrigin","vertical","horizontal","overlap","Avatar","user1","height","px","py","TextField","placeholder","InputProps","endAdornment","InputAdornment","fullWidth","onChange","e","SearchChat","target","value","List","pb","Button","onClick","event","currentTarget","Menu","onClose","MenuListProps","MenuItem","Scrollbar","ListItemButton","SelectChat","selected","ListItemAvatar","status","thumb","ListItemText","primary","secondary","secondaryTypographyProps","noWrap","my","flexShrink","formatDistanceToNowStrict","Date","addSuffix","m","Alert","severity","isMobileSidebarOpen","onSidebarClose","lgUp","useMediaQuery","breakpoints","up","Drawer","zIndex","isInSidebar","totalAttachment","uniq","flatten","attachment","totalMedia","StyledStack","Stack","border","borderLeft","borderStyle","right","background","palette","paper","boxShadow","shadows","borderColor","divider","spacing","c","index","direction","a","bgcolor","grey","icon","mr","file","fileSize","className","IconButton","stroke","toggleChatSidebar","setOpen","chatDetails","ListItem","dense","disableGutters","Divider","maxWidth","lineHeight","flexDirection","ml","pt","setMsg","chosenEmoji","setChosenEmoji","newMsg","onSubmit","preventDefault","stopPropagation","sendMsg","Popover","keepMounted","transformOrigin","onEmojiClick","_event","emojiObject","emoji","native","InputBase","inputProps","bind","disabled","useState","setMobileSidebarOpen","PageContainer","Breadcrumb","AppCard","flexGrow"],"sourceRoot":""}